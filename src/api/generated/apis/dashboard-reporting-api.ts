/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
/**
 * DashboardReportingApi - axios parameter creator
 * @export
 */
export const DashboardReportingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get items needing attention (Admin/Assigner only)
         * @summary Get system alerts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlerts: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dashboard/alerts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get overall statistics for dashboard (Admin/Assigner only)
         * @summary Get dashboard overview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardOverview: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dashboard/overview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get detailed phone statistics (Admin/Assigner only)
         * @summary Get phone statistics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneStats: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dashboard/phones/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get recent assignments, transfers, and activities (Admin/Assigner only)
         * @summary Get recent activity
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecentActivity: async (limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dashboard/recent-activity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get detailed SIM card statistics (Admin/Assigner only)
         * @summary Get SIM card statistics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimCardStats: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dashboard/simcards/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user statistics and distribution (Admin/Assigner only)
         * @summary Get user statistics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserStats: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dashboard/users/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardReportingApi - functional programming interface
 * @export
 */
export const DashboardReportingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DashboardReportingApiAxiosParamCreator(configuration)
    return {
        /**
         * Get items needing attention (Admin/Assigner only)
         * @summary Get system alerts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlerts(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAlerts(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardReportingApi.getAlerts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get overall statistics for dashboard (Admin/Assigner only)
         * @summary Get dashboard overview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDashboardOverview(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDashboardOverview(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardReportingApi.getDashboardOverview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get detailed phone statistics (Admin/Assigner only)
         * @summary Get phone statistics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhoneStats(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhoneStats(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardReportingApi.getPhoneStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get recent assignments, transfers, and activities (Admin/Assigner only)
         * @summary Get recent activity
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecentActivity(limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecentActivity(limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardReportingApi.getRecentActivity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get detailed SIM card statistics (Admin/Assigner only)
         * @summary Get SIM card statistics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimCardStats(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimCardStats(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardReportingApi.getSimCardStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get user statistics and distribution (Admin/Assigner only)
         * @summary Get user statistics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserStats(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserStats(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DashboardReportingApi.getUserStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DashboardReportingApi - factory interface
 * @export
 */
export const DashboardReportingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DashboardReportingApiFp(configuration)
    return {
        /**
         * Get items needing attention (Admin/Assigner only)
         * @summary Get system alerts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlerts(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getAlerts(options).then((request) => request(axios, basePath));
        },
        /**
         * Get overall statistics for dashboard (Admin/Assigner only)
         * @summary Get dashboard overview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardOverview(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getDashboardOverview(options).then((request) => request(axios, basePath));
        },
        /**
         * Get detailed phone statistics (Admin/Assigner only)
         * @summary Get phone statistics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneStats(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getPhoneStats(options).then((request) => request(axios, basePath));
        },
        /**
         * Get recent assignments, transfers, and activities (Admin/Assigner only)
         * @summary Get recent activity
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecentActivity(limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getRecentActivity(limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get detailed SIM card statistics (Admin/Assigner only)
         * @summary Get SIM card statistics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimCardStats(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getSimCardStats(options).then((request) => request(axios, basePath));
        },
        /**
         * Get user statistics and distribution (Admin/Assigner only)
         * @summary Get user statistics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserStats(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getUserStats(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DashboardReportingApi - object-oriented interface
 * @export
 * @class DashboardReportingApi
 * @extends {BaseAPI}
 */
export class DashboardReportingApi extends BaseAPI {
    /**
     * Get items needing attention (Admin/Assigner only)
     * @summary Get system alerts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardReportingApi
     */
    public getAlerts(options?: RawAxiosRequestConfig) {
        return DashboardReportingApiFp(this.configuration).getAlerts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get overall statistics for dashboard (Admin/Assigner only)
     * @summary Get dashboard overview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardReportingApi
     */
    public getDashboardOverview(options?: RawAxiosRequestConfig) {
        return DashboardReportingApiFp(this.configuration).getDashboardOverview(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get detailed phone statistics (Admin/Assigner only)
     * @summary Get phone statistics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardReportingApi
     */
    public getPhoneStats(options?: RawAxiosRequestConfig) {
        return DashboardReportingApiFp(this.configuration).getPhoneStats(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get recent assignments, transfers, and activities (Admin/Assigner only)
     * @summary Get recent activity
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardReportingApi
     */
    public getRecentActivity(limit?: number, options?: RawAxiosRequestConfig) {
        return DashboardReportingApiFp(this.configuration).getRecentActivity(limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get detailed SIM card statistics (Admin/Assigner only)
     * @summary Get SIM card statistics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardReportingApi
     */
    public getSimCardStats(options?: RawAxiosRequestConfig) {
        return DashboardReportingApiFp(this.configuration).getSimCardStats(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user statistics and distribution (Admin/Assigner only)
     * @summary Get user statistics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardReportingApi
     */
    public getUserStats(options?: RawAxiosRequestConfig) {
        return DashboardReportingApiFp(this.configuration).getUserStats(options).then((request) => request(this.axios, this.basePath));
    }
}

