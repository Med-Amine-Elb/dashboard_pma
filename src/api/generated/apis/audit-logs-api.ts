/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
/**
 * AuditLogsApi - axios parameter creator
 * @export
 */
export const AuditLogsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Export audit logs to CSV format (Admin only)
         * @summary Export audit logs
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [action] 
         * @param {string} [entityType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAuditLogs1: async (startDate?: string, endDate?: string, action?: string, entityType?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/audit-logs/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }

            if (entityType !== undefined) {
                localVarQueryParameter['entityType'] = entityType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get audit log statistics and summary (Admin only)
         * @summary Get audit log summary
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuditLogSummary: async (startDate?: string, endDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/audit-logs/summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get audit logs with filtering and pagination (Admin only)
         * @summary Get audit logs
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [action] 
         * @param {string} [entityType] 
         * @param {number} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuditLogs: async (page?: number, limit?: number, action?: string, entityType?: string, userId?: number, startDate?: string, endDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/audit-logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }

            if (entityType !== undefined) {
                localVarQueryParameter['entityType'] = entityType;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get audit logs for a specific entity (Admin only)
         * @summary Get entity audit logs
         * @param {string} entityType 
         * @param {number} entityId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAuditLogs: async (entityType: string, entityId: number, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityType' is not null or undefined
            assertParamExists('getEntityAuditLogs', 'entityType', entityType)
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('getEntityAuditLogs', 'entityId', entityId)
            const localVarPath = `/audit-logs/entity/{entityType}/{entityId}`
                .replace(`{${"entityType"}}`, encodeURIComponent(String(entityType)))
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get audit logs for a specific user (Admin only)
         * @summary Get user audit logs
         * @param {number} userId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAuditLogs: async (userId: number, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserAuditLogs', 'userId', userId)
            const localVarPath = `/audit-logs/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuditLogsApi - functional programming interface
 * @export
 */
export const AuditLogsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuditLogsApiAxiosParamCreator(configuration)
    return {
        /**
         * Export audit logs to CSV format (Admin only)
         * @summary Export audit logs
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [action] 
         * @param {string} [entityType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportAuditLogs1(startDate?: string, endDate?: string, action?: string, entityType?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportAuditLogs1(startDate, endDate, action, entityType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuditLogsApi.exportAuditLogs1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get audit log statistics and summary (Admin only)
         * @summary Get audit log summary
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuditLogSummary(startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuditLogSummary(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuditLogsApi.getAuditLogSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get audit logs with filtering and pagination (Admin only)
         * @summary Get audit logs
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [action] 
         * @param {string} [entityType] 
         * @param {number} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuditLogs(page?: number, limit?: number, action?: string, entityType?: string, userId?: number, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuditLogs(page, limit, action, entityType, userId, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuditLogsApi.getAuditLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get audit logs for a specific entity (Admin only)
         * @summary Get entity audit logs
         * @param {string} entityType 
         * @param {number} entityId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityAuditLogs(entityType: string, entityId: number, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityAuditLogs(entityType, entityId, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuditLogsApi.getEntityAuditLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get audit logs for a specific user (Admin only)
         * @summary Get user audit logs
         * @param {number} userId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserAuditLogs(userId: number, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserAuditLogs(userId, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuditLogsApi.getUserAuditLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuditLogsApi - factory interface
 * @export
 */
export const AuditLogsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuditLogsApiFp(configuration)
    return {
        /**
         * Export audit logs to CSV format (Admin only)
         * @summary Export audit logs
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [action] 
         * @param {string} [entityType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAuditLogs1(startDate?: string, endDate?: string, action?: string, entityType?: string, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.exportAuditLogs1(startDate, endDate, action, entityType, options).then((request) => request(axios, basePath));
        },
        /**
         * Get audit log statistics and summary (Admin only)
         * @summary Get audit log summary
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuditLogSummary(startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getAuditLogSummary(startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get audit logs with filtering and pagination (Admin only)
         * @summary Get audit logs
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [action] 
         * @param {string} [entityType] 
         * @param {number} [userId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuditLogs(page?: number, limit?: number, action?: string, entityType?: string, userId?: number, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getAuditLogs(page, limit, action, entityType, userId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get audit logs for a specific entity (Admin only)
         * @summary Get entity audit logs
         * @param {string} entityType 
         * @param {number} entityId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAuditLogs(entityType: string, entityId: number, page?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getEntityAuditLogs(entityType, entityId, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get audit logs for a specific user (Admin only)
         * @summary Get user audit logs
         * @param {number} userId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAuditLogs(userId: number, page?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getUserAuditLogs(userId, page, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuditLogsApi - object-oriented interface
 * @export
 * @class AuditLogsApi
 * @extends {BaseAPI}
 */
export class AuditLogsApi extends BaseAPI {
    /**
     * Export audit logs to CSV format (Admin only)
     * @summary Export audit logs
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {string} [action] 
     * @param {string} [entityType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogsApi
     */
    public exportAuditLogs1(startDate?: string, endDate?: string, action?: string, entityType?: string, options?: RawAxiosRequestConfig) {
        return AuditLogsApiFp(this.configuration).exportAuditLogs1(startDate, endDate, action, entityType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get audit log statistics and summary (Admin only)
     * @summary Get audit log summary
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogsApi
     */
    public getAuditLogSummary(startDate?: string, endDate?: string, options?: RawAxiosRequestConfig) {
        return AuditLogsApiFp(this.configuration).getAuditLogSummary(startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get audit logs with filtering and pagination (Admin only)
     * @summary Get audit logs
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [action] 
     * @param {string} [entityType] 
     * @param {number} [userId] 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogsApi
     */
    public getAuditLogs(page?: number, limit?: number, action?: string, entityType?: string, userId?: number, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig) {
        return AuditLogsApiFp(this.configuration).getAuditLogs(page, limit, action, entityType, userId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get audit logs for a specific entity (Admin only)
     * @summary Get entity audit logs
     * @param {string} entityType 
     * @param {number} entityId 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogsApi
     */
    public getEntityAuditLogs(entityType: string, entityId: number, page?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return AuditLogsApiFp(this.configuration).getEntityAuditLogs(entityType, entityId, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get audit logs for a specific user (Admin only)
     * @summary Get user audit logs
     * @param {number} userId 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogsApi
     */
    public getUserAuditLogs(userId: number, page?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return AuditLogsApiFp(this.configuration).getUserAuditLogs(userId, page, limit, options).then((request) => request(this.axios, this.basePath));
    }
}

