/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
/**
 * AssignmentHistoryApi - axios parameter creator
 * @export
 */
export const AssignmentHistoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get assignment/transfer history for a phone
         * @summary Get phone assignment history
         * @param {number} phoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneHistory: async (phoneId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneId' is not null or undefined
            assertParamExists('getPhoneHistory', 'phoneId', phoneId)
            const localVarPath = `/assignment-history/phone/{phoneId}`
                .replace(`{${"phoneId"}}`, encodeURIComponent(String(phoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get assignment/transfer history for a SIM card
         * @summary Get SIM card assignment history
         * @param {number} simId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimHistory: async (simId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'simId' is not null or undefined
            assertParamExists('getSimHistory', 'simId', simId)
            const localVarPath = `/assignment-history/sim/{simId}`
                .replace(`{${"simId"}}`, encodeURIComponent(String(simId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get assignment/transfer history for a user
         * @summary Get user assignment history
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserHistory: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserHistory', 'userId', userId)
            const localVarPath = `/assignment-history/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssignmentHistoryApi - functional programming interface
 * @export
 */
export const AssignmentHistoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssignmentHistoryApiAxiosParamCreator(configuration)
    return {
        /**
         * Get assignment/transfer history for a phone
         * @summary Get phone assignment history
         * @param {number} phoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhoneHistory(phoneId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhoneHistory(phoneId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentHistoryApi.getPhoneHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get assignment/transfer history for a SIM card
         * @summary Get SIM card assignment history
         * @param {number} simId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimHistory(simId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimHistory(simId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentHistoryApi.getSimHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get assignment/transfer history for a user
         * @summary Get user assignment history
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserHistory(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserHistory(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssignmentHistoryApi.getUserHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AssignmentHistoryApi - factory interface
 * @export
 */
export const AssignmentHistoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssignmentHistoryApiFp(configuration)
    return {
        /**
         * Get assignment/transfer history for a phone
         * @summary Get phone assignment history
         * @param {number} phoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneHistory(phoneId: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getPhoneHistory(phoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get assignment/transfer history for a SIM card
         * @summary Get SIM card assignment history
         * @param {number} simId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimHistory(simId: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getSimHistory(simId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get assignment/transfer history for a user
         * @summary Get user assignment history
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserHistory(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getUserHistory(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssignmentHistoryApi - object-oriented interface
 * @export
 * @class AssignmentHistoryApi
 * @extends {BaseAPI}
 */
export class AssignmentHistoryApi extends BaseAPI {
    /**
     * Get assignment/transfer history for a phone
     * @summary Get phone assignment history
     * @param {number} phoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentHistoryApi
     */
    public getPhoneHistory(phoneId: number, options?: RawAxiosRequestConfig) {
        return AssignmentHistoryApiFp(this.configuration).getPhoneHistory(phoneId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get assignment/transfer history for a SIM card
     * @summary Get SIM card assignment history
     * @param {number} simId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentHistoryApi
     */
    public getSimHistory(simId: number, options?: RawAxiosRequestConfig) {
        return AssignmentHistoryApiFp(this.configuration).getSimHistory(simId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get assignment/transfer history for a user
     * @summary Get user assignment history
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentHistoryApi
     */
    public getUserHistory(userId: number, options?: RawAxiosRequestConfig) {
        return AssignmentHistoryApiFp(this.configuration).getUserHistory(userId, options).then((request) => request(this.axios, this.basePath));
    }
}

