/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { SimCardDto } from '../models';
/**
 * SIMCardManagementApi - axios parameter creator
 * @export
 */
export const SIMCardManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assign a SIM card to a specific user (Admin/Assigner only)
         * @summary Assign SIM card to user
         * @param {number} id 
         * @param {{ [key: string]: number; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignSimCard: async (id: number, requestBody: { [key: string]: number; }, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('assignSimCard', 'id', id)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('assignSimCard', 'requestBody', requestBody)
            const localVarPath = `/simcards/{id}/assign`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new SIM card (Admin only)
         * @summary Create new SIM card
         * @param {SimCardDto} simCardDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSimCard: async (simCardDto: SimCardDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'simCardDto' is not null or undefined
            assertParamExists('createSimCard', 'simCardDto', simCardDto)
            const localVarPath = `/simcards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(simCardDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete SIM card (Admin only)
         * @summary Delete SIM card
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSimCard: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSimCard', 'id', id)
            const localVarPath = `/simcards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SIM card details by ID (Admin/Assigner/Assigned User only)
         * @summary Get SIM card by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimCardById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSimCardById', 'id', id)
            const localVarPath = `/simcards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all SIM cards with pagination and filtering (Admin/Assigner only)
         * @summary Get all SIM cards
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {GetSimCardsStatusEnum} [status] 
         * @param {string} [number] 
         * @param {string} [iccid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimCards: async (page?: number, limit?: number, status?: GetSimCardsStatusEnum, number?: string, iccid?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/simcards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }

            if (iccid !== undefined) {
                localVarQueryParameter['iccid'] = iccid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfer a SIM card from current user to another user (Admin/Assigner only)
         * @summary Transfer SIM card to another user
         * @param {number} id 
         * @param {{ [key: string]: number; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSimCard: async (id: number, requestBody: { [key: string]: number; }, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('transferSimCard', 'id', id)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('transferSimCard', 'requestBody', requestBody)
            const localVarPath = `/simcards/{id}/transfer`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unassign a SIM card from its current user (Admin/Assigner only)
         * @summary Unassign SIM card from user
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassignSimCard: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('unassignSimCard', 'id', id)
            const localVarPath = `/simcards/{id}/unassign`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update SIM card information (Admin only)
         * @summary Update SIM card
         * @param {number} id 
         * @param {SimCardDto} simCardDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSimCard: async (id: number, simCardDto: SimCardDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSimCard', 'id', id)
            // verify required parameter 'simCardDto' is not null or undefined
            assertParamExists('updateSimCard', 'simCardDto', simCardDto)
            const localVarPath = `/simcards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(simCardDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SIMCardManagementApi - functional programming interface
 * @export
 */
export const SIMCardManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SIMCardManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * Assign a SIM card to a specific user (Admin/Assigner only)
         * @summary Assign SIM card to user
         * @param {number} id 
         * @param {{ [key: string]: number; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignSimCard(id: number, requestBody: { [key: string]: number; }, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignSimCard(id, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SIMCardManagementApi.assignSimCard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new SIM card (Admin only)
         * @summary Create new SIM card
         * @param {SimCardDto} simCardDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSimCard(simCardDto: SimCardDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSimCard(simCardDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SIMCardManagementApi.createSimCard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete SIM card (Admin only)
         * @summary Delete SIM card
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSimCard(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSimCard(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SIMCardManagementApi.deleteSimCard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get SIM card details by ID (Admin/Assigner/Assigned User only)
         * @summary Get SIM card by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimCardById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimCardById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SIMCardManagementApi.getSimCardById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all SIM cards with pagination and filtering (Admin/Assigner only)
         * @summary Get all SIM cards
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {GetSimCardsStatusEnum} [status] 
         * @param {string} [number] 
         * @param {string} [iccid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimCards(page?: number, limit?: number, status?: GetSimCardsStatusEnum, number?: string, iccid?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimCards(page, limit, status, number, iccid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SIMCardManagementApi.getSimCards']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Transfer a SIM card from current user to another user (Admin/Assigner only)
         * @summary Transfer SIM card to another user
         * @param {number} id 
         * @param {{ [key: string]: number; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferSimCard(id: number, requestBody: { [key: string]: number; }, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferSimCard(id, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SIMCardManagementApi.transferSimCard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Unassign a SIM card from its current user (Admin/Assigner only)
         * @summary Unassign SIM card from user
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unassignSimCard(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unassignSimCard(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SIMCardManagementApi.unassignSimCard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update SIM card information (Admin only)
         * @summary Update SIM card
         * @param {number} id 
         * @param {SimCardDto} simCardDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSimCard(id: number, simCardDto: SimCardDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSimCard(id, simCardDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SIMCardManagementApi.updateSimCard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SIMCardManagementApi - factory interface
 * @export
 */
export const SIMCardManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SIMCardManagementApiFp(configuration)
    return {
        /**
         * Assign a SIM card to a specific user (Admin/Assigner only)
         * @summary Assign SIM card to user
         * @param {number} id 
         * @param {{ [key: string]: number; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignSimCard(id: number, requestBody: { [key: string]: number; }, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.assignSimCard(id, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new SIM card (Admin only)
         * @summary Create new SIM card
         * @param {SimCardDto} simCardDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSimCard(simCardDto: SimCardDto, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.createSimCard(simCardDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete SIM card (Admin only)
         * @summary Delete SIM card
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSimCard(id: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.deleteSimCard(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get SIM card details by ID (Admin/Assigner/Assigned User only)
         * @summary Get SIM card by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimCardById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getSimCardById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all SIM cards with pagination and filtering (Admin/Assigner only)
         * @summary Get all SIM cards
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {GetSimCardsStatusEnum} [status] 
         * @param {string} [number] 
         * @param {string} [iccid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimCards(page?: number, limit?: number, status?: GetSimCardsStatusEnum, number?: string, iccid?: string, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getSimCards(page, limit, status, number, iccid, options).then((request) => request(axios, basePath));
        },
        /**
         * Transfer a SIM card from current user to another user (Admin/Assigner only)
         * @summary Transfer SIM card to another user
         * @param {number} id 
         * @param {{ [key: string]: number; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSimCard(id: number, requestBody: { [key: string]: number; }, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.transferSimCard(id, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Unassign a SIM card from its current user (Admin/Assigner only)
         * @summary Unassign SIM card from user
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassignSimCard(id: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.unassignSimCard(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update SIM card information (Admin only)
         * @summary Update SIM card
         * @param {number} id 
         * @param {SimCardDto} simCardDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSimCard(id: number, simCardDto: SimCardDto, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.updateSimCard(id, simCardDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SIMCardManagementApi - object-oriented interface
 * @export
 * @class SIMCardManagementApi
 * @extends {BaseAPI}
 */
export class SIMCardManagementApi extends BaseAPI {
    /**
     * Assign a SIM card to a specific user (Admin/Assigner only)
     * @summary Assign SIM card to user
     * @param {number} id 
     * @param {{ [key: string]: number; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SIMCardManagementApi
     */
    public assignSimCard(id: number, requestBody: { [key: string]: number; }, options?: RawAxiosRequestConfig) {
        return SIMCardManagementApiFp(this.configuration).assignSimCard(id, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new SIM card (Admin only)
     * @summary Create new SIM card
     * @param {SimCardDto} simCardDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SIMCardManagementApi
     */
    public createSimCard(simCardDto: SimCardDto, options?: RawAxiosRequestConfig) {
        return SIMCardManagementApiFp(this.configuration).createSimCard(simCardDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete SIM card (Admin only)
     * @summary Delete SIM card
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SIMCardManagementApi
     */
    public deleteSimCard(id: number, options?: RawAxiosRequestConfig) {
        return SIMCardManagementApiFp(this.configuration).deleteSimCard(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get SIM card details by ID (Admin/Assigner/Assigned User only)
     * @summary Get SIM card by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SIMCardManagementApi
     */
    public getSimCardById(id: number, options?: RawAxiosRequestConfig) {
        return SIMCardManagementApiFp(this.configuration).getSimCardById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all SIM cards with pagination and filtering (Admin/Assigner only)
     * @summary Get all SIM cards
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {GetSimCardsStatusEnum} [status] 
     * @param {string} [number] 
     * @param {string} [iccid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SIMCardManagementApi
     */
    public getSimCards(page?: number, limit?: number, status?: GetSimCardsStatusEnum, number?: string, iccid?: string, options?: RawAxiosRequestConfig) {
        return SIMCardManagementApiFp(this.configuration).getSimCards(page, limit, status, number, iccid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Transfer a SIM card from current user to another user (Admin/Assigner only)
     * @summary Transfer SIM card to another user
     * @param {number} id 
     * @param {{ [key: string]: number; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SIMCardManagementApi
     */
    public transferSimCard(id: number, requestBody: { [key: string]: number; }, options?: RawAxiosRequestConfig) {
        return SIMCardManagementApiFp(this.configuration).transferSimCard(id, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unassign a SIM card from its current user (Admin/Assigner only)
     * @summary Unassign SIM card from user
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SIMCardManagementApi
     */
    public unassignSimCard(id: number, options?: RawAxiosRequestConfig) {
        return SIMCardManagementApiFp(this.configuration).unassignSimCard(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update SIM card information (Admin only)
     * @summary Update SIM card
     * @param {number} id 
     * @param {SimCardDto} simCardDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SIMCardManagementApi
     */
    public updateSimCard(id: number, simCardDto: SimCardDto, options?: RawAxiosRequestConfig) {
        return SIMCardManagementApiFp(this.configuration).updateSimCard(id, simCardDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetSimCardsStatusEnum = {
    Available: 'AVAILABLE',
    Assigned: 'ASSIGNED',
    Lost: 'LOST',
    Blocked: 'BLOCKED'
} as const;
export type GetSimCardsStatusEnum = typeof GetSimCardsStatusEnum[keyof typeof GetSimCardsStatusEnum];
