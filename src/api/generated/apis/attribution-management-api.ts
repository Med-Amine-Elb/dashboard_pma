/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AttributionDto } from '../models';
/**
 * AttributionManagementApi - axios parameter creator
 * @export
 */
export const AttributionManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new attribution (Admin/Assigner only)
         * @summary Create new attribution
         * @param {AttributionDto} attributionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttribution: async (attributionDto: AttributionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributionDto' is not null or undefined
            assertParamExists('createAttribution', 'attributionDto', attributionDto)
            const localVarPath = `/attributions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attributionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete attribution (Admin only)
         * @summary Delete attribution
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttribution: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAttribution', 'id', id)
            const localVarPath = `/attributions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get active attributions for a specific user (Admin/Assigner only)
         * @summary Get user active attributions
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveAttributionsByUser: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getActiveAttributionsByUser', 'userId', userId)
            const localVarPath = `/attributions/user/{userId}/active`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get attribution details by ID (Admin/Assigner only)
         * @summary Get attribution by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributionById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAttributionById', 'id', id)
            const localVarPath = `/attributions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get attribution history for a specific phone (Admin/Assigner only)
         * @summary Get phone attribution history
         * @param {number} phoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributionHistoryByPhone: async (phoneId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneId' is not null or undefined
            assertParamExists('getAttributionHistoryByPhone', 'phoneId', phoneId)
            const localVarPath = `/attributions/history/phone/{phoneId}`
                .replace(`{${"phoneId"}}`, encodeURIComponent(String(phoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get attribution history for a specific SIM card (Admin/Assigner only)
         * @summary Get SIM card attribution history
         * @param {number} simCardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributionHistoryBySimCard: async (simCardId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'simCardId' is not null or undefined
            assertParamExists('getAttributionHistoryBySimCard', 'simCardId', simCardId)
            const localVarPath = `/attributions/history/sim/{simCardId}`
                .replace(`{${"simCardId"}}`, encodeURIComponent(String(simCardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all attributions with pagination and filtering (Admin/Assigner only)
         * @summary Get all attributions
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {GetAttributionsStatusEnum} [status] 
         * @param {number} [userId] 
         * @param {number} [assignedBy] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributions: async (page?: number, limit?: number, status?: GetAttributionsStatusEnum, userId?: number, assignedBy?: number, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/attributions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (assignedBy !== undefined) {
                localVarQueryParameter['assignedBy'] = assignedBy;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mark attribution as returned (Admin/Assigner only)
         * @summary Return attribution
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        returnAttribution: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('returnAttribution', 'id', id)
            const localVarPath = `/attributions/{id}/return`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update attribution information (Admin/Assigner only)
         * @summary Update attribution
         * @param {number} id 
         * @param {AttributionDto} attributionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttribution: async (id: number, attributionDto: AttributionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAttribution', 'id', id)
            // verify required parameter 'attributionDto' is not null or undefined
            assertParamExists('updateAttribution', 'attributionDto', attributionDto)
            const localVarPath = `/attributions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attributionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttributionManagementApi - functional programming interface
 * @export
 */
export const AttributionManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttributionManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new attribution (Admin/Assigner only)
         * @summary Create new attribution
         * @param {AttributionDto} attributionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAttribution(attributionDto: AttributionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAttribution(attributionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttributionManagementApi.createAttribution']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete attribution (Admin only)
         * @summary Delete attribution
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAttribution(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAttribution(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttributionManagementApi.deleteAttribution']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get active attributions for a specific user (Admin/Assigner only)
         * @summary Get user active attributions
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActiveAttributionsByUser(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActiveAttributionsByUser(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttributionManagementApi.getActiveAttributionsByUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get attribution details by ID (Admin/Assigner only)
         * @summary Get attribution by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttributionById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttributionById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttributionManagementApi.getAttributionById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get attribution history for a specific phone (Admin/Assigner only)
         * @summary Get phone attribution history
         * @param {number} phoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttributionHistoryByPhone(phoneId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttributionHistoryByPhone(phoneId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttributionManagementApi.getAttributionHistoryByPhone']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get attribution history for a specific SIM card (Admin/Assigner only)
         * @summary Get SIM card attribution history
         * @param {number} simCardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttributionHistoryBySimCard(simCardId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttributionHistoryBySimCard(simCardId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttributionManagementApi.getAttributionHistoryBySimCard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all attributions with pagination and filtering (Admin/Assigner only)
         * @summary Get all attributions
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {GetAttributionsStatusEnum} [status] 
         * @param {number} [userId] 
         * @param {number} [assignedBy] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttributions(page?: number, limit?: number, status?: GetAttributionsStatusEnum, userId?: number, assignedBy?: number, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttributions(page, limit, status, userId, assignedBy, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttributionManagementApi.getAttributions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Mark attribution as returned (Admin/Assigner only)
         * @summary Return attribution
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async returnAttribution(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.returnAttribution(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttributionManagementApi.returnAttribution']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update attribution information (Admin/Assigner only)
         * @summary Update attribution
         * @param {number} id 
         * @param {AttributionDto} attributionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAttribution(id: number, attributionDto: AttributionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAttribution(id, attributionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttributionManagementApi.updateAttribution']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AttributionManagementApi - factory interface
 * @export
 */
export const AttributionManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttributionManagementApiFp(configuration)
    return {
        /**
         * Create a new attribution (Admin/Assigner only)
         * @summary Create new attribution
         * @param {AttributionDto} attributionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttribution(attributionDto: AttributionDto, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.createAttribution(attributionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete attribution (Admin only)
         * @summary Delete attribution
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttribution(id: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.deleteAttribution(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get active attributions for a specific user (Admin/Assigner only)
         * @summary Get user active attributions
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveAttributionsByUser(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getActiveAttributionsByUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get attribution details by ID (Admin/Assigner only)
         * @summary Get attribution by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributionById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getAttributionById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get attribution history for a specific phone (Admin/Assigner only)
         * @summary Get phone attribution history
         * @param {number} phoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributionHistoryByPhone(phoneId: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getAttributionHistoryByPhone(phoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get attribution history for a specific SIM card (Admin/Assigner only)
         * @summary Get SIM card attribution history
         * @param {number} simCardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributionHistoryBySimCard(simCardId: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getAttributionHistoryBySimCard(simCardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all attributions with pagination and filtering (Admin/Assigner only)
         * @summary Get all attributions
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {GetAttributionsStatusEnum} [status] 
         * @param {number} [userId] 
         * @param {number} [assignedBy] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributions(page?: number, limit?: number, status?: GetAttributionsStatusEnum, userId?: number, assignedBy?: number, search?: string, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getAttributions(page, limit, status, userId, assignedBy, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Mark attribution as returned (Admin/Assigner only)
         * @summary Return attribution
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        returnAttribution(id: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.returnAttribution(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update attribution information (Admin/Assigner only)
         * @summary Update attribution
         * @param {number} id 
         * @param {AttributionDto} attributionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttribution(id: number, attributionDto: AttributionDto, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.updateAttribution(id, attributionDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttributionManagementApi - object-oriented interface
 * @export
 * @class AttributionManagementApi
 * @extends {BaseAPI}
 */
export class AttributionManagementApi extends BaseAPI {
    /**
     * Create a new attribution (Admin/Assigner only)
     * @summary Create new attribution
     * @param {AttributionDto} attributionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributionManagementApi
     */
    public createAttribution(attributionDto: AttributionDto, options?: RawAxiosRequestConfig) {
        return AttributionManagementApiFp(this.configuration).createAttribution(attributionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete attribution (Admin only)
     * @summary Delete attribution
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributionManagementApi
     */
    public deleteAttribution(id: number, options?: RawAxiosRequestConfig) {
        return AttributionManagementApiFp(this.configuration).deleteAttribution(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get active attributions for a specific user (Admin/Assigner only)
     * @summary Get user active attributions
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributionManagementApi
     */
    public getActiveAttributionsByUser(userId: number, options?: RawAxiosRequestConfig) {
        return AttributionManagementApiFp(this.configuration).getActiveAttributionsByUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get attribution details by ID (Admin/Assigner only)
     * @summary Get attribution by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributionManagementApi
     */
    public getAttributionById(id: number, options?: RawAxiosRequestConfig) {
        return AttributionManagementApiFp(this.configuration).getAttributionById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get attribution history for a specific phone (Admin/Assigner only)
     * @summary Get phone attribution history
     * @param {number} phoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributionManagementApi
     */
    public getAttributionHistoryByPhone(phoneId: number, options?: RawAxiosRequestConfig) {
        return AttributionManagementApiFp(this.configuration).getAttributionHistoryByPhone(phoneId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get attribution history for a specific SIM card (Admin/Assigner only)
     * @summary Get SIM card attribution history
     * @param {number} simCardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributionManagementApi
     */
    public getAttributionHistoryBySimCard(simCardId: number, options?: RawAxiosRequestConfig) {
        return AttributionManagementApiFp(this.configuration).getAttributionHistoryBySimCard(simCardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all attributions with pagination and filtering (Admin/Assigner only)
     * @summary Get all attributions
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {GetAttributionsStatusEnum} [status] 
     * @param {number} [userId] 
     * @param {number} [assignedBy] 
     * @param {string} [search] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributionManagementApi
     */
    public getAttributions(page?: number, limit?: number, status?: GetAttributionsStatusEnum, userId?: number, assignedBy?: number, search?: string, options?: RawAxiosRequestConfig) {
        return AttributionManagementApiFp(this.configuration).getAttributions(page, limit, status, userId, assignedBy, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Mark attribution as returned (Admin/Assigner only)
     * @summary Return attribution
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributionManagementApi
     */
    public returnAttribution(id: number, options?: RawAxiosRequestConfig) {
        return AttributionManagementApiFp(this.configuration).returnAttribution(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update attribution information (Admin/Assigner only)
     * @summary Update attribution
     * @param {number} id 
     * @param {AttributionDto} attributionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributionManagementApi
     */
    public updateAttribution(id: number, attributionDto: AttributionDto, options?: RawAxiosRequestConfig) {
        return AttributionManagementApiFp(this.configuration).updateAttribution(id, attributionDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetAttributionsStatusEnum = {
    Active: 'ACTIVE',
    Pending: 'PENDING',
    Returned: 'RETURNED'
} as const;
export type GetAttributionsStatusEnum = typeof GetAttributionsStatusEnum[keyof typeof GetAttributionsStatusEnum];
