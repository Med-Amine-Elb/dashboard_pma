/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { PhoneDto } from '../models';
/**
 * PhoneManagementApi - axios parameter creator
 * @export
 */
export const PhoneManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assign a phone to a specific user (Admin/Assigner only)
         * @summary Assign phone to user
         * @param {number} id 
         * @param {{ [key: string]: number; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignPhone: async (id: number, requestBody: { [key: string]: number; }, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('assignPhone', 'id', id)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('assignPhone', 'requestBody', requestBody)
            const localVarPath = `/phones/{id}/assign`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new phone (Admin only)
         * @summary Create new phone
         * @param {PhoneDto} phoneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPhone: async (phoneDto: PhoneDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneDto' is not null or undefined
            assertParamExists('createPhone', 'phoneDto', phoneDto)
            const localVarPath = `/phones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phoneDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete phone (Admin only)
         * @summary Delete phone
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePhone: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePhone', 'id', id)
            const localVarPath = `/phones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get phone details by ID (Admin/Assigner/Assigned User only)
         * @summary Get phone by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPhoneById', 'id', id)
            const localVarPath = `/phones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get phone maintenance history by phone ID (Admin/Assigner/Assigned User only)
         * @summary Get phone maintenance history
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneMaintenanceHistory: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPhoneMaintenanceHistory', 'id', id)
            const localVarPath = `/phones/{id}/maintenance-history`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get phone usage statistics by phone ID (Admin/Assigner/Assigned User only)
         * @summary Get phone usage statistics
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneUsageStats: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPhoneUsageStats', 'id', id)
            const localVarPath = `/phones/{id}/usage-stats`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all phones with pagination and filtering (Admin/Assigner only)
         * @summary Get all phones
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {GetPhonesStatusEnum} [status] 
         * @param {string} [brand] 
         * @param {string} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhones: async (page?: number, limit?: number, status?: GetPhonesStatusEnum, brand?: string, model?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/phones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (brand !== undefined) {
                localVarQueryParameter['brand'] = brand;
            }

            if (model !== undefined) {
                localVarQueryParameter['model'] = model;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * User can request maintenance for their assigned phone
         * @summary Request maintenance for a phone
         * @param {number} id 
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMaintenance: async (id: number, requestBody: { [key: string]: string; }, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('requestMaintenance', 'id', id)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('requestMaintenance', 'requestBody', requestBody)
            const localVarPath = `/phones/{id}/maintenance-request`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfer a phone from current user to another user (Admin/Assigner only)
         * @summary Transfer phone to another user
         * @param {number} id 
         * @param {{ [key: string]: number; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferPhone: async (id: number, requestBody: { [key: string]: number; }, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('transferPhone', 'id', id)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('transferPhone', 'requestBody', requestBody)
            const localVarPath = `/phones/{id}/transfer`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unassign a phone from its current user (Admin/Assigner only)
         * @summary Unassign phone from user
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassignPhone: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('unassignPhone', 'id', id)
            const localVarPath = `/phones/{id}/unassign`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update phone information (Admin only)
         * @summary Update phone
         * @param {number} id 
         * @param {PhoneDto} phoneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePhone: async (id: number, phoneDto: PhoneDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePhone', 'id', id)
            // verify required parameter 'phoneDto' is not null or undefined
            assertParamExists('updatePhone', 'phoneDto', phoneDto)
            const localVarPath = `/phones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phoneDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PhoneManagementApi - functional programming interface
 * @export
 */
export const PhoneManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PhoneManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * Assign a phone to a specific user (Admin/Assigner only)
         * @summary Assign phone to user
         * @param {number} id 
         * @param {{ [key: string]: number; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignPhone(id: number, requestBody: { [key: string]: number; }, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignPhone(id, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhoneManagementApi.assignPhone']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new phone (Admin only)
         * @summary Create new phone
         * @param {PhoneDto} phoneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPhone(phoneDto: PhoneDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPhone(phoneDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhoneManagementApi.createPhone']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete phone (Admin only)
         * @summary Delete phone
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePhone(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePhone(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhoneManagementApi.deletePhone']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get phone details by ID (Admin/Assigner/Assigned User only)
         * @summary Get phone by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhoneById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhoneById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhoneManagementApi.getPhoneById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get phone maintenance history by phone ID (Admin/Assigner/Assigned User only)
         * @summary Get phone maintenance history
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhoneMaintenanceHistory(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhoneMaintenanceHistory(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhoneManagementApi.getPhoneMaintenanceHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get phone usage statistics by phone ID (Admin/Assigner/Assigned User only)
         * @summary Get phone usage statistics
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhoneUsageStats(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhoneUsageStats(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhoneManagementApi.getPhoneUsageStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all phones with pagination and filtering (Admin/Assigner only)
         * @summary Get all phones
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {GetPhonesStatusEnum} [status] 
         * @param {string} [brand] 
         * @param {string} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhones(page?: number, limit?: number, status?: GetPhonesStatusEnum, brand?: string, model?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhones(page, limit, status, brand, model, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhoneManagementApi.getPhones']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * User can request maintenance for their assigned phone
         * @summary Request maintenance for a phone
         * @param {number} id 
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestMaintenance(id: number, requestBody: { [key: string]: string; }, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestMaintenance(id, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhoneManagementApi.requestMaintenance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Transfer a phone from current user to another user (Admin/Assigner only)
         * @summary Transfer phone to another user
         * @param {number} id 
         * @param {{ [key: string]: number; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferPhone(id: number, requestBody: { [key: string]: number; }, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferPhone(id, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhoneManagementApi.transferPhone']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Unassign a phone from its current user (Admin/Assigner only)
         * @summary Unassign phone from user
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unassignPhone(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unassignPhone(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhoneManagementApi.unassignPhone']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update phone information (Admin only)
         * @summary Update phone
         * @param {number} id 
         * @param {PhoneDto} phoneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePhone(id: number, phoneDto: PhoneDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePhone(id, phoneDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhoneManagementApi.updatePhone']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PhoneManagementApi - factory interface
 * @export
 */
export const PhoneManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PhoneManagementApiFp(configuration)
    return {
        /**
         * Assign a phone to a specific user (Admin/Assigner only)
         * @summary Assign phone to user
         * @param {number} id 
         * @param {{ [key: string]: number; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignPhone(id: number, requestBody: { [key: string]: number; }, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.assignPhone(id, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new phone (Admin only)
         * @summary Create new phone
         * @param {PhoneDto} phoneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPhone(phoneDto: PhoneDto, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.createPhone(phoneDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete phone (Admin only)
         * @summary Delete phone
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePhone(id: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.deletePhone(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get phone details by ID (Admin/Assigner/Assigned User only)
         * @summary Get phone by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getPhoneById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get phone maintenance history by phone ID (Admin/Assigner/Assigned User only)
         * @summary Get phone maintenance history
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneMaintenanceHistory(id: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getPhoneMaintenanceHistory(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get phone usage statistics by phone ID (Admin/Assigner/Assigned User only)
         * @summary Get phone usage statistics
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneUsageStats(id: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getPhoneUsageStats(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all phones with pagination and filtering (Admin/Assigner only)
         * @summary Get all phones
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {GetPhonesStatusEnum} [status] 
         * @param {string} [brand] 
         * @param {string} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhones(page?: number, limit?: number, status?: GetPhonesStatusEnum, brand?: string, model?: string, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getPhones(page, limit, status, brand, model, options).then((request) => request(axios, basePath));
        },
        /**
         * User can request maintenance for their assigned phone
         * @summary Request maintenance for a phone
         * @param {number} id 
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMaintenance(id: number, requestBody: { [key: string]: string; }, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.requestMaintenance(id, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Transfer a phone from current user to another user (Admin/Assigner only)
         * @summary Transfer phone to another user
         * @param {number} id 
         * @param {{ [key: string]: number; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferPhone(id: number, requestBody: { [key: string]: number; }, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.transferPhone(id, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Unassign a phone from its current user (Admin/Assigner only)
         * @summary Unassign phone from user
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassignPhone(id: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.unassignPhone(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update phone information (Admin only)
         * @summary Update phone
         * @param {number} id 
         * @param {PhoneDto} phoneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePhone(id: number, phoneDto: PhoneDto, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.updatePhone(id, phoneDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PhoneManagementApi - object-oriented interface
 * @export
 * @class PhoneManagementApi
 * @extends {BaseAPI}
 */
export class PhoneManagementApi extends BaseAPI {
    /**
     * Assign a phone to a specific user (Admin/Assigner only)
     * @summary Assign phone to user
     * @param {number} id 
     * @param {{ [key: string]: number; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneManagementApi
     */
    public assignPhone(id: number, requestBody: { [key: string]: number; }, options?: RawAxiosRequestConfig) {
        return PhoneManagementApiFp(this.configuration).assignPhone(id, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new phone (Admin only)
     * @summary Create new phone
     * @param {PhoneDto} phoneDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneManagementApi
     */
    public createPhone(phoneDto: PhoneDto, options?: RawAxiosRequestConfig) {
        return PhoneManagementApiFp(this.configuration).createPhone(phoneDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete phone (Admin only)
     * @summary Delete phone
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneManagementApi
     */
    public deletePhone(id: number, options?: RawAxiosRequestConfig) {
        return PhoneManagementApiFp(this.configuration).deletePhone(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get phone details by ID (Admin/Assigner/Assigned User only)
     * @summary Get phone by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneManagementApi
     */
    public getPhoneById(id: number, options?: RawAxiosRequestConfig) {
        return PhoneManagementApiFp(this.configuration).getPhoneById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get phone maintenance history by phone ID (Admin/Assigner/Assigned User only)
     * @summary Get phone maintenance history
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneManagementApi
     */
    public getPhoneMaintenanceHistory(id: number, options?: RawAxiosRequestConfig) {
        return PhoneManagementApiFp(this.configuration).getPhoneMaintenanceHistory(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get phone usage statistics by phone ID (Admin/Assigner/Assigned User only)
     * @summary Get phone usage statistics
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneManagementApi
     */
    public getPhoneUsageStats(id: number, options?: RawAxiosRequestConfig) {
        return PhoneManagementApiFp(this.configuration).getPhoneUsageStats(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all phones with pagination and filtering (Admin/Assigner only)
     * @summary Get all phones
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {GetPhonesStatusEnum} [status] 
     * @param {string} [brand] 
     * @param {string} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneManagementApi
     */
    public getPhones(page?: number, limit?: number, status?: GetPhonesStatusEnum, brand?: string, model?: string, options?: RawAxiosRequestConfig) {
        return PhoneManagementApiFp(this.configuration).getPhones(page, limit, status, brand, model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * User can request maintenance for their assigned phone
     * @summary Request maintenance for a phone
     * @param {number} id 
     * @param {{ [key: string]: string; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneManagementApi
     */
    public requestMaintenance(id: number, requestBody: { [key: string]: string; }, options?: RawAxiosRequestConfig) {
        return PhoneManagementApiFp(this.configuration).requestMaintenance(id, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Transfer a phone from current user to another user (Admin/Assigner only)
     * @summary Transfer phone to another user
     * @param {number} id 
     * @param {{ [key: string]: number; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneManagementApi
     */
    public transferPhone(id: number, requestBody: { [key: string]: number; }, options?: RawAxiosRequestConfig) {
        return PhoneManagementApiFp(this.configuration).transferPhone(id, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unassign a phone from its current user (Admin/Assigner only)
     * @summary Unassign phone from user
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneManagementApi
     */
    public unassignPhone(id: number, options?: RawAxiosRequestConfig) {
        return PhoneManagementApiFp(this.configuration).unassignPhone(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update phone information (Admin only)
     * @summary Update phone
     * @param {number} id 
     * @param {PhoneDto} phoneDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneManagementApi
     */
    public updatePhone(id: number, phoneDto: PhoneDto, options?: RawAxiosRequestConfig) {
        return PhoneManagementApiFp(this.configuration).updatePhone(id, phoneDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetPhonesStatusEnum = {
    Available: 'AVAILABLE',
    Assigned: 'ASSIGNED',
    Lost: 'LOST',
    Damaged: 'DAMAGED'
} as const;
export type GetPhonesStatusEnum = typeof GetPhonesStatusEnum[keyof typeof GetPhonesStatusEnum];
