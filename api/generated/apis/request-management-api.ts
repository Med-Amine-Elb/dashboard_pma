/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RequestDto } from '../models';
/**
 * RequestManagementApi - axios parameter creator
 * @export
 */
export const RequestManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a comment to a request (Admin/Assigner only)
         * @summary Add comment to request
         * @param {number} id 
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addComment: async (id: number, requestBody: { [key: string]: string; }, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addComment', 'id', id)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('addComment', 'requestBody', requestBody)
            const localVarPath = `/requests/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Assign a request to a user (Admin/Assigner only)
         * @summary Assign request
         * @param {number} id 
         * @param {{ [key: string]: number; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignRequest: async (id: number, requestBody: { [key: string]: number; }, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('assignRequest', 'id', id)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('assignRequest', 'requestBody', requestBody)
            const localVarPath = `/requests/{id}/assign`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new request
         * @summary Create new request
         * @param {RequestDto} requestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRequest: async (requestDto: RequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestDto' is not null or undefined
            assertParamExists('createRequest', 'requestDto', requestDto)
            const localVarPath = `/requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete request (Admin only)
         * @summary Delete request
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRequest: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRequest', 'id', id)
            const localVarPath = `/requests/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all pending requests (Admin/Assigner only)
         * @summary Get pending requests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingRequests: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/requests/pending`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get request details by ID
         * @summary Get request by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRequestById', 'id', id)
            const localVarPath = `/requests/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all requests with pagination and filtering (Admin/Assigner only)
         * @summary Get all requests
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {GetRequestsStatusEnum} [status] 
         * @param {GetRequestsTypeEnum} [type] 
         * @param {GetRequestsPriorityEnum} [priority] 
         * @param {number} [userId] 
         * @param {number} [assignedTo] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequests: async (page?: number, limit?: number, status?: GetRequestsStatusEnum, type?: GetRequestsTypeEnum, priority?: GetRequestsPriorityEnum, userId?: number, assignedTo?: number, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (priority !== undefined) {
                localVarQueryParameter['priority'] = priority;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (assignedTo !== undefined) {
                localVarQueryParameter['assignedTo'] = assignedTo;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all requests for a specific user
         * @summary Get user requests
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestsByUser: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getRequestsByUser', 'userId', userId)
            const localVarPath = `/requests/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all urgent requests (Admin/Assigner only)
         * @summary Get urgent requests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUrgentRequests: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/requests/urgent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reject a request (Admin/Assigner only)
         * @summary Reject request
         * @param {number} id 
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectRequest: async (id: number, requestBody: { [key: string]: string; }, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rejectRequest', 'id', id)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('rejectRequest', 'requestBody', requestBody)
            const localVarPath = `/requests/{id}/reject`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mark a request as resolved (Admin/Assigner only)
         * @summary Resolve request
         * @param {number} id 
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveRequest: async (id: number, requestBody: { [key: string]: string; }, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('resolveRequest', 'id', id)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('resolveRequest', 'requestBody', requestBody)
            const localVarPath = `/requests/{id}/resolve`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update request information (Admin/Assigner only)
         * @summary Update request
         * @param {number} id 
         * @param {RequestDto} requestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRequest: async (id: number, requestDto: RequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRequest', 'id', id)
            // verify required parameter 'requestDto' is not null or undefined
            assertParamExists('updateRequest', 'requestDto', requestDto)
            const localVarPath = `/requests/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RequestManagementApi - functional programming interface
 * @export
 */
export const RequestManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RequestManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a comment to a request (Admin/Assigner only)
         * @summary Add comment to request
         * @param {number} id 
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addComment(id: number, requestBody: { [key: string]: string; }, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addComment(id, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestManagementApi.addComment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Assign a request to a user (Admin/Assigner only)
         * @summary Assign request
         * @param {number} id 
         * @param {{ [key: string]: number; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignRequest(id: number, requestBody: { [key: string]: number; }, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignRequest(id, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestManagementApi.assignRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new request
         * @summary Create new request
         * @param {RequestDto} requestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRequest(requestDto: RequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRequest(requestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestManagementApi.createRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete request (Admin only)
         * @summary Delete request
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRequest(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRequest(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestManagementApi.deleteRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all pending requests (Admin/Assigner only)
         * @summary Get pending requests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPendingRequests(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPendingRequests(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestManagementApi.getPendingRequests']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get request details by ID
         * @summary Get request by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRequestById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRequestById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestManagementApi.getRequestById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all requests with pagination and filtering (Admin/Assigner only)
         * @summary Get all requests
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {GetRequestsStatusEnum} [status] 
         * @param {GetRequestsTypeEnum} [type] 
         * @param {GetRequestsPriorityEnum} [priority] 
         * @param {number} [userId] 
         * @param {number} [assignedTo] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRequests(page?: number, limit?: number, status?: GetRequestsStatusEnum, type?: GetRequestsTypeEnum, priority?: GetRequestsPriorityEnum, userId?: number, assignedTo?: number, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRequests(page, limit, status, type, priority, userId, assignedTo, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestManagementApi.getRequests']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all requests for a specific user
         * @summary Get user requests
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRequestsByUser(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRequestsByUser(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestManagementApi.getRequestsByUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all urgent requests (Admin/Assigner only)
         * @summary Get urgent requests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUrgentRequests(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUrgentRequests(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestManagementApi.getUrgentRequests']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Reject a request (Admin/Assigner only)
         * @summary Reject request
         * @param {number} id 
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rejectRequest(id: number, requestBody: { [key: string]: string; }, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rejectRequest(id, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestManagementApi.rejectRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Mark a request as resolved (Admin/Assigner only)
         * @summary Resolve request
         * @param {number} id 
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resolveRequest(id: number, requestBody: { [key: string]: string; }, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resolveRequest(id, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestManagementApi.resolveRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update request information (Admin/Assigner only)
         * @summary Update request
         * @param {number} id 
         * @param {RequestDto} requestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRequest(id: number, requestDto: RequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRequest(id, requestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestManagementApi.updateRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RequestManagementApi - factory interface
 * @export
 */
export const RequestManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RequestManagementApiFp(configuration)
    return {
        /**
         * Add a comment to a request (Admin/Assigner only)
         * @summary Add comment to request
         * @param {number} id 
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addComment(id: number, requestBody: { [key: string]: string; }, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.addComment(id, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Assign a request to a user (Admin/Assigner only)
         * @summary Assign request
         * @param {number} id 
         * @param {{ [key: string]: number; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignRequest(id: number, requestBody: { [key: string]: number; }, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.assignRequest(id, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new request
         * @summary Create new request
         * @param {RequestDto} requestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRequest(requestDto: RequestDto, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.createRequest(requestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete request (Admin only)
         * @summary Delete request
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRequest(id: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.deleteRequest(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all pending requests (Admin/Assigner only)
         * @summary Get pending requests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingRequests(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getPendingRequests(options).then((request) => request(axios, basePath));
        },
        /**
         * Get request details by ID
         * @summary Get request by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getRequestById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all requests with pagination and filtering (Admin/Assigner only)
         * @summary Get all requests
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {GetRequestsStatusEnum} [status] 
         * @param {GetRequestsTypeEnum} [type] 
         * @param {GetRequestsPriorityEnum} [priority] 
         * @param {number} [userId] 
         * @param {number} [assignedTo] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequests(page?: number, limit?: number, status?: GetRequestsStatusEnum, type?: GetRequestsTypeEnum, priority?: GetRequestsPriorityEnum, userId?: number, assignedTo?: number, search?: string, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getRequests(page, limit, status, type, priority, userId, assignedTo, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all requests for a specific user
         * @summary Get user requests
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestsByUser(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getRequestsByUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all urgent requests (Admin/Assigner only)
         * @summary Get urgent requests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUrgentRequests(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getUrgentRequests(options).then((request) => request(axios, basePath));
        },
        /**
         * Reject a request (Admin/Assigner only)
         * @summary Reject request
         * @param {number} id 
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectRequest(id: number, requestBody: { [key: string]: string; }, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.rejectRequest(id, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Mark a request as resolved (Admin/Assigner only)
         * @summary Resolve request
         * @param {number} id 
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveRequest(id: number, requestBody: { [key: string]: string; }, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.resolveRequest(id, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Update request information (Admin/Assigner only)
         * @summary Update request
         * @param {number} id 
         * @param {RequestDto} requestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRequest(id: number, requestDto: RequestDto, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.updateRequest(id, requestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RequestManagementApi - object-oriented interface
 * @export
 * @class RequestManagementApi
 * @extends {BaseAPI}
 */
export class RequestManagementApi extends BaseAPI {
    /**
     * Add a comment to a request (Admin/Assigner only)
     * @summary Add comment to request
     * @param {number} id 
     * @param {{ [key: string]: string; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestManagementApi
     */
    public addComment(id: number, requestBody: { [key: string]: string; }, options?: RawAxiosRequestConfig) {
        return RequestManagementApiFp(this.configuration).addComment(id, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Assign a request to a user (Admin/Assigner only)
     * @summary Assign request
     * @param {number} id 
     * @param {{ [key: string]: number; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestManagementApi
     */
    public assignRequest(id: number, requestBody: { [key: string]: number; }, options?: RawAxiosRequestConfig) {
        return RequestManagementApiFp(this.configuration).assignRequest(id, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new request
     * @summary Create new request
     * @param {RequestDto} requestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestManagementApi
     */
    public createRequest(requestDto: RequestDto, options?: RawAxiosRequestConfig) {
        return RequestManagementApiFp(this.configuration).createRequest(requestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete request (Admin only)
     * @summary Delete request
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestManagementApi
     */
    public deleteRequest(id: number, options?: RawAxiosRequestConfig) {
        return RequestManagementApiFp(this.configuration).deleteRequest(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all pending requests (Admin/Assigner only)
     * @summary Get pending requests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestManagementApi
     */
    public getPendingRequests(options?: RawAxiosRequestConfig) {
        return RequestManagementApiFp(this.configuration).getPendingRequests(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get request details by ID
     * @summary Get request by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestManagementApi
     */
    public getRequestById(id: number, options?: RawAxiosRequestConfig) {
        return RequestManagementApiFp(this.configuration).getRequestById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all requests with pagination and filtering (Admin/Assigner only)
     * @summary Get all requests
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {GetRequestsStatusEnum} [status] 
     * @param {GetRequestsTypeEnum} [type] 
     * @param {GetRequestsPriorityEnum} [priority] 
     * @param {number} [userId] 
     * @param {number} [assignedTo] 
     * @param {string} [search] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestManagementApi
     */
    public getRequests(page?: number, limit?: number, status?: GetRequestsStatusEnum, type?: GetRequestsTypeEnum, priority?: GetRequestsPriorityEnum, userId?: number, assignedTo?: number, search?: string, options?: RawAxiosRequestConfig) {
        return RequestManagementApiFp(this.configuration).getRequests(page, limit, status, type, priority, userId, assignedTo, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all requests for a specific user
     * @summary Get user requests
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestManagementApi
     */
    public getRequestsByUser(userId: number, options?: RawAxiosRequestConfig) {
        return RequestManagementApiFp(this.configuration).getRequestsByUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all urgent requests (Admin/Assigner only)
     * @summary Get urgent requests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestManagementApi
     */
    public getUrgentRequests(options?: RawAxiosRequestConfig) {
        return RequestManagementApiFp(this.configuration).getUrgentRequests(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reject a request (Admin/Assigner only)
     * @summary Reject request
     * @param {number} id 
     * @param {{ [key: string]: string; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestManagementApi
     */
    public rejectRequest(id: number, requestBody: { [key: string]: string; }, options?: RawAxiosRequestConfig) {
        return RequestManagementApiFp(this.configuration).rejectRequest(id, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Mark a request as resolved (Admin/Assigner only)
     * @summary Resolve request
     * @param {number} id 
     * @param {{ [key: string]: string; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestManagementApi
     */
    public resolveRequest(id: number, requestBody: { [key: string]: string; }, options?: RawAxiosRequestConfig) {
        return RequestManagementApiFp(this.configuration).resolveRequest(id, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update request information (Admin/Assigner only)
     * @summary Update request
     * @param {number} id 
     * @param {RequestDto} requestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestManagementApi
     */
    public updateRequest(id: number, requestDto: RequestDto, options?: RawAxiosRequestConfig) {
        return RequestManagementApiFp(this.configuration).updateRequest(id, requestDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetRequestsStatusEnum = {
    Pending: 'PENDING',
    InProgress: 'IN_PROGRESS',
    Approved: 'APPROVED',
    Rejected: 'REJECTED',
    Resolved: 'RESOLVED'
} as const;
export type GetRequestsStatusEnum = typeof GetRequestsStatusEnum[keyof typeof GetRequestsStatusEnum];
/**
 * @export
 */
export const GetRequestsTypeEnum = {
    Problem: 'PROBLEM',
    Replacement: 'REPLACEMENT',
    Support: 'SUPPORT',
    Change: 'CHANGE'
} as const;
export type GetRequestsTypeEnum = typeof GetRequestsTypeEnum[keyof typeof GetRequestsTypeEnum];
/**
 * @export
 */
export const GetRequestsPriorityEnum = {
    Low: 'LOW',
    Normal: 'NORMAL',
    High: 'HIGH',
    Urgent: 'URGENT'
} as const;
export type GetRequestsPriorityEnum = typeof GetRequestsPriorityEnum[keyof typeof GetRequestsPriorityEnum];
