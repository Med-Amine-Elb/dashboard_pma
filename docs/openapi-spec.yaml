openapi: 3.0.3
info:
  title: TéléphoneManager API
  description: API for managing corporate phone and SIM card assignments
  version: 1.0.0
  contact:
    name: TéléphoneManager Support
    email: support@telephonemanager.com

servers:
  - url: https://api.telephonemanager.com/v1
    description: Production server
  - url: https://staging-api.telephonemanager.com/v1
    description: Staging server

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [admin, assigner, user]
        department:
          type: string
        status:
          type: string
          enum: [active, inactive]
        joinDate:
          type: string
          format: date
        phone:
          type: string
        avatar:
          type: string
          format: uri

    Phone:
      type: object
      properties:
        id:
          type: string
        model:
          type: string
        brand:
          type: string
        serialNumber:
          type: string
        imei:
          type: string
        status:
          type: string
          enum: [available, assigned, maintenance, retired]
        condition:
          type: string
          enum: [excellent, good, fair, poor]
        purchaseDate:
          type: string
          format: date
        price:
          type: number
        storage:
          type: string
        color:
          type: string

    SimCard:
      type: object
      properties:
        id:
          type: string
        number:
          type: string
        carrier:
          type: string
        plan:
          type: string
        status:
          type: string
          enum: [available, assigned, suspended, expired]
        monthlyFee:
          type: number
        dataLimit:
          type: string
        iccid:
          type: string
        pin:
          type: string
        puk:
          type: string

    Attribution:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        phoneId:
          type: string
        simCardId:
          type: string
        assignedBy:
          type: string
        assignmentDate:
          type: string
          format: date
        status:
          type: string
          enum: [active, pending, returned]
        notes:
          type: string

    Request:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        type:
          type: string
          enum: [Problème, Remplacement, Support, Changement]
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [En attente, En cours, Approuvé, Rejeté, Résolu]
        priority:
          type: string
          enum: [Faible, Normale, Élevée, Urgente]
        createdDate:
          type: string
          format: date-time
        assignedTo:
          type: string

    Notification:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        title:
          type: string
        message:
          type: string
        type:
          type: string
          enum: [success, warning, error, info]
        read:
          type: boolean
        createdAt:
          type: string
          format: date-time
        actionUrl:
          type: string

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: string

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    get:
      tags:
        - User Management
      summary: Get all users
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: search
          in: query
          schema:
            type: string
        - name: department
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive]
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      pagination:
                        type: object
                        properties:
                          page:
                            type: integer
                          limit:
                            type: integer
                          total:
                            type: integer
                          totalPages:
                            type: integer

    post:
      tags:
        - User Management
      summary: Create new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Validation error
        '409':
          description: User already exists

  /phones:
    get:
      tags:
        - Phone Management
      summary: Get all phones
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
        - name: status
          in: query
          schema:
            type: string
            enum: [available, assigned, maintenance, retired]
        - name: brand
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Phones retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      phones:
                        type: array
                        items:
                          $ref: '#/components/schemas/Phone'

  /notifications:
    get:
      tags:
        - Notifications
      summary: Get user notifications
      parameters:
        - name: read
          in: query
          schema:
            type: boolean
        - name: type
          in: query
          schema:
            type: string
            enum: [success, warning, error, info]
      responses:
        '200':
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      notifications:
                        type: array
                        items:
                          $ref: '#/components/schemas/Notification'
                      unreadCount:
                        type: integer

tags:
  - name: Authentication
    description: User authentication endpoints
  - name: User Management
    description: User CRUD operations
  - name: Phone Management
    description: Phone inventory management
  - name: SIM Card Management
    description: SIM card management
  - name: Attribution Management
    description: Phone and SIM assignments
  - name: Request Management
    description: User requests and support tickets
  - name: Notifications
    description: User notifications
  - name: Calendar
    description: Event and calendar management
  - name: Messages
    description: Internal messaging system
  - name: Dashboard
    description: Analytics and dashboard data
  - name: Settings
    description: User and system settings
